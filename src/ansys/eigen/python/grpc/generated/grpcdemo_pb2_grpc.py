# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ansys.eigen.python.grpc.generated.grpcdemo_pb2 as grpcdemo__pb2


class GRPCDemoStub(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different from REST. You do not need to post
    (store) in the end server the objects of the interface (such as Vector, Matrix).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/grpcdemo.GRPCDemo/SayHello',
                request_serializer=grpcdemo__pb2.HelloRequest.SerializeToString,
                response_deserializer=grpcdemo__pb2.HelloReply.FromString,
                )
        self.FlipVector = channel.stream_stream(
                '/grpcdemo.GRPCDemo/FlipVector',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.AddVectors = channel.stream_stream(
                '/grpcdemo.GRPCDemo/AddVectors',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.MultiplyVectors = channel.stream_stream(
                '/grpcdemo.GRPCDemo/MultiplyVectors',
                request_serializer=grpcdemo__pb2.Vector.SerializeToString,
                response_deserializer=grpcdemo__pb2.Vector.FromString,
                )
        self.AddMatrices = channel.stream_stream(
                '/grpcdemo.GRPCDemo/AddMatrices',
                request_serializer=grpcdemo__pb2.Matrix.SerializeToString,
                response_deserializer=grpcdemo__pb2.Matrix.FromString,
                )
        self.MultiplyMatrices = channel.stream_stream(
                '/grpcdemo.GRPCDemo/MultiplyMatrices',
                request_serializer=grpcdemo__pb2.Matrix.SerializeToString,
                response_deserializer=grpcdemo__pb2.Matrix.FromString,
                )


class GRPCDemoServicer(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different from REST. You do not need to post
    (store) in the end server the objects of the interface (such as Vector, Matrix).
    """

    def SayHello(self, request, context):
        """Send a greeting.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method is not implemented.')
        raise NotImplementedError('Method is not implemented.')

    def FlipVector(self, request_iterator, context):
        """Flip a vector [A, B, C, D] --> [D, C, B, A].
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method is not implemented.')
        raise NotImplementedError('Method is not implemented.')

    def AddVectors(self, request_iterator, context):
        """Add two vectors.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method is not implemented.')
        raise NotImplementedError('Method is not implemented.')

    def MultiplyVectors(self, request_iterator, context):
        """Multiple two vectors.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method is not implemented.')
        raise NotImplementedError('Method is not implemented.')

    def AddMatrices(self, request_iterator, context):
        """Adds two matrices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented.')
        raise NotImplementedError('Method is not implemented.')

    def MultiplyMatrices(self, request_iterator, context):
        """Multiplies two matrices.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method is not implemented.')
        raise NotImplementedError('Method is not implemented.')


def add_GRPCDemoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=grpcdemo__pb2.HelloRequest.FromString,
                    response_serializer=grpcdemo__pb2.HelloReply.SerializeToString,
            ),
            'FlipVector': grpc.stream_stream_rpc_method_handler(
                    servicer.FlipVector,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'AddVectors': grpc.stream_stream_rpc_method_handler(
                    servicer.AddVectors,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'MultiplyVectors': grpc.stream_stream_rpc_method_handler(
                    servicer.MultiplyVectors,
                    request_deserializer=grpcdemo__pb2.Vector.FromString,
                    response_serializer=grpcdemo__pb2.Vector.SerializeToString,
            ),
            'AddMatrices': grpc.stream_stream_rpc_method_handler(
                    servicer.AddMatrices,
                    request_deserializer=grpcdemo__pb2.Matrix.FromString,
                    response_serializer=grpcdemo__pb2.Matrix.SerializeToString,
            ),
            'MultiplyMatrices': grpc.stream_stream_rpc_method_handler(
                    servicer.MultiplyMatrices,
                    request_deserializer=grpcdemo__pb2.Matrix.FromString,
                    response_serializer=grpcdemo__pb2.Matrix.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcdemo.GRPCDemo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCDemo(object):
    """================================================================================
    DEMO SERVICE for API Eigen Example
    ================================================================================

    Interface exported by the server. Different from REST. You do not need to post
    (store) in the end server the objects of the interface (such as Vector, Matrix).
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcdemo.GRPCDemo/SayHello',
            grpcdemo__pb2.HelloRequest.SerializeToString,
            grpcdemo__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlipVector(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcdemo.GRPCDemo/FlipVector',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddVectors(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcdemo.GRPCDemo/AddVectors',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiplyVectors(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcdemo.GRPCDemo/MultiplyVectors',
            grpcdemo__pb2.Vector.SerializeToString,
            grpcdemo__pb2.Vector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMatrices(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcdemo.GRPCDemo/AddMatrices',
            grpcdemo__pb2.Matrix.SerializeToString,
            grpcdemo__pb2.Matrix.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MultiplyMatrices(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpcdemo.GRPCDemo/MultiplyMatrices',
            grpcdemo__pb2.Matrix.SerializeToString,
            grpcdemo__pb2.Matrix.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
